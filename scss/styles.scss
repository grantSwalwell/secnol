html {
    box-sizing: border-box;
    -ms-overflow-style: scrollbar;
}

body {
    margin: 0;
    padding: 0;
    padding-left: 10px;
    padding-right: 10px;
    width: 100%;
    background-color: lightskyblue;
}
  
*, *::before, *::after {
  box-sizing: inherit;
}

$xs: 392px;
$sm: 576px;
$md: 768px;
$lg: 992px;
$xl: 1200px;
$xxl: 1400px;

$yes: 10%;

@mixin respond($breakpoint) {
    @if $breakpoint == $xs {
        @media(max-width: $sm) {
            @content
        }
    };

    @if $breakpoint == $sm {
        @media(min-width: $sm) and (max-width: $md) {
            @content
        }
    };

    @if $breakpoint == $md {
        @media(min-width: $md) and (max-width: $lg) {
            @content
        }
    };

    @if $breakpoint == $lg {
        @media(min-width: $lg) and (max-width: $xl) {
            @content
        }
    };

    @if $breakpoint == $xl {
        @media(min-width: $xl) and (max-width: $xxl) {
            @content
        }
    };

    @if $breakpoint == $xxl {
        @media(min-width: $xxl) {
            @content
        }
    };
}

@mixin respond-on-prop($prop, $v-xs, $v-sm, $v-md, $v-lg, $v-xl, $v-xxl) {
    @include respond($xs) {
        #{$prop}: $v-xs;
    }
    @include respond($sm) {
        #{$prop}: $v-sm;
    }
    @include respond($md) {
        #{$prop}: $v-md;
    }
    @include respond($lg) {
        #{$prop}: $v-lg;
    }
    @include respond($xl) {
        #{$prop}: $v-xl;
    }
    @include respond($xxl) {
        #{$prop}: $v-xxl;
    }
}


.container {
    display:flex;
    width: 100%;
    max-width: 100%;
    flex-direction: column;
    justify-content: center;
    margin-top: 15px;
    align-items: center;
    
    
}


.row {
    width:100%;
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}



.col-50 {
    width: 50%;
    max-width: 50%;
    flex: 0 0 50%;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    padding: 10px;
}

@include respond($xs) {
    .col-mobile-100 {
        width: unset;
        max-width: unset;
        flex: unset;
        width: 100%;
        max-width: 100%;
        flex: 0 0 100%;
        display: flex;
        flex-direction: row;
    }
}


.col {
    width: 100%;
    max-width: 100%;
    flex-direction: column;
    padding: 10px;
}

.item {

}

h1 {
    color: grey;
}


.page {
    
    @include respond-on-prop(width, 100%, 540px, 720px, 960px, 1140px, 1320px);
    @include respond-on-prop(max-width, 100%, 540px, 720px, 960px, 1140px, 1320px);
    
    margin-top: 2em;
    margin-bottom: 2em;
    border-radius: 5px;
    padding: 1em;
    min-height: 80vh;
    box-shadow: 0 0 3px 0 rgba(0,0,0,0.2);
    text-shadow: 0.035rem 0.0345rem 0.0125rem rgb(0 0 0 / 75%);
	color: #222;
    //display: flex;
    background-color: white;
    font-family: 'Courier New', Courier, monospace;

    p {
        font-size: 1.5rem;
    }

    img {
        max-width: 100%;
    }


    .header {
        //color: white;
        font-size: 2.5rem;
        //text-shadow: 0px 1px 0px #999, 0px 2px 0px #888, 0px 3px 0px #777, 0px 4px 0px #666, 0px 5px 0px #555, 0px 6px 0px #444, 0px 7px 0px #333, 0px 8px 7px #001135;
        img {
            max-width: 33%;
        }
        text-shadow: 0.035rem 0.0345rem 0.0125rem rgb(0 0 0 / 75%);
    }

    /*
    h1 {
        color: #fff;
        text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #fff, 0 0 20px #ff2d95, 0 0 30px #ff2d95, 0 0 40px #ff2d95, 0 0 50px #ff2d95, 0 0 75px #ff2d95;
        letter-spacing: 5px;
        font-family: 'Courier New', Courier, monospace;
    }*/
    
    
}